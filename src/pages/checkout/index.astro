---
import Input from 'components/Input.astro'
import BaseLayout from 'layouts/BaseLayout.astro'
import Layout from 'layouts/Layout.astro'
import MiddlewareLayout from 'layouts/MiddlewareLayout.astro'
import SandLayout from 'layouts/SandLayout.astro'
import Button from 'components/Button.astro'
import { regions } from 'consts'
import { currency } from 'utils'
import { getLangFromUrl, useTranslatedPath, useTranslations } from 'i18n/utils'
import ProductCheckout from './_components/product-checkout.svelte'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const translatePath = useTranslatedPath(lang)
---

<Layout title="Checkout">
  <MiddlewareLayout>
    <BaseLayout>
      <SandLayout class="py-24">
        <div class="m-auto w-[76%] max-w-screen-2xl">
          <div class="grid grid-cols-1 md:grid-cols-2 md:gap-x-24">
            <article class="grid grid-cols-2">
              <header class="col-span-2 mb-10 flex flex-col md:flex-row">
                <h1
                  class="col-span-2 text-center text-xl uppercase md:col-span-1 md:text-2xl"
                >
                  {t('checkout.finishShop')}
                </h1>
                <h3 class="col-span-2 text-center text-xl md:col-span-1">
                  (<span id="countProducts"></span>
                  {t('common.product')})
                </h3>
              </header>
              <p class="col-span-2 text-base md:text-xl">
                {t('checkout.detailsShop')}
              </p>
              <Input
                required
                autocomplete="off"
                class="col-span-2 mb-4"
                label="Nombre"
                name="name"
              />
              <Input
                required
                autocomplete="off"
                class="col-span-2 mb-4"
                label="Apellidos"
                name="lastaname"
              />
              <p class="mb-4">Pais/Region</p>
              <p translate="no" class="mb-4">Peru</p>
              <Input
                required
                autocomplete="off"
                class="col-span-2 mb-4"
                label="Direccion"
                name="address"
              />
              <label class="col-span-2 text-xs">{t('checkout.region')}</label>
              <select
                required
                id="regions"
                class="col-span-2 mb-4 border border-eerie-black bg-transparent px-2.5 py-1"
                name="region"
              >
                {
                  [<option selected hidden disabled />].concat(
                    regions.map((region: any) => (
                      <option value={region.id_ubigeo}>
                        {region.nombre_ubigeo}
                      </option>
                    ))
                  )
                }
              </select>
              <label class="col-span-2 text-xs">{t('checkout.province')}</label>
              <select
                required
                id="provinces"
                class="col-span-2 mb-4 border border-eerie-black bg-transparent px-2.5 py-1"
                name="provinces"
              >
              </select>
              <label class="col-span-2 text-xs">{t('checkout.district')}</label>
              <select
                required
                id="districts"
                class="col-span-2 mb-4 border border-eerie-black bg-transparent px-2.5 py-1"
                name="district"
              >
              </select>
              <Input
                required
                autocomplete="off"
                class="col-span-2 mb-4"
                type="tel"
                label={t('common.phone')}
                name="phone"
              />
              <Input
                required
                autocomplete="off"
                class="col-span-2 mb-4"
                type="email"
                label={t('common.email')}
                name="email"
              />
              <!-- <Input -->
              <!--   required -->
              <!--   autocomplete="off" -->
              <!--   class="col-span-2 mb-4" -->
              <!--   type="password" -->
              <!--   label="Crear Contraseña" -->
              <!--   name="password" -->
              <!-- /> -->
              <label class="col-span-2 text-xs">{t('checkout.notes')}</label>
              <textarea
                required
                class="col-span-2 min-h-40 border border-eerie-black bg-transparent px-2.5 py-1"
                name="notes"></textarea>
              <Button
                id="buttonCheckout"
                class="col-span-2 mt-10 block md:hidden"
                >{t('checkout.finishShop')}</Button
              >
            </article>
            <article class="hidden md:block">
              <a
                class="mb-10 block text-base text-rosewood"
                href={translatePath('/products')}
              >
                {t('cart.continueShop')}
              </a>
              <div class="grid grid-cols-2 border px-4 py-5">
                <h2 class="col-span-2 mb-9 text-center font-thabit text-xl">
                  {t('checkout.yourOrder')}
                </h2>
                <ProductCheckout client:only="svelte" />
                <div
                  class="col-span-2 grid grid-cols-2 border-b px-[0.625rem] py-4"
                >
                  <p class="text-base">{t('checkout.delivery')}:</p>
                  <p class="justify-self-end text-base">{currency(10)}</p>
                </div>
                <div
                  class="col-span-2 grid grid-cols-2 border-b px-[0.625rem] py-4"
                >
                  <p class="text-base">{t('common.total')}:</p>
                  <p id="total" class="justify-self-end text-base"></p>
                </div>
                <Button id="buttonCheckout" class="col-span-2 mt-10 block"
                  >{t('checkout.finishShop')}</Button
                >
              </div>
            </article>
          </div>
        </div>
      </SandLayout>
    </BaseLayout>
  </MiddlewareLayout>
</Layout>
<script is:inline src="https://js.culqi.com/checkout-js"></script>
<script>
  import { getCountProducts, getTotal } from 'adapters/storage'
  import { districts, provinces } from 'consts'
  import { currency } from 'utils'
  const $regions = document.querySelector('#regions')
  const $provinces = document.querySelector('#provinces')
  const $districts = document.querySelector('#districts')
  const $countProducts = document.querySelectorAll('#countProducts')
  const $buttonCheckout = document.querySelector('#buttonCheckout')
  const $$total = document.querySelectorAll('#total')

  $$total?.forEach(($el) => {
    $el?.insertAdjacentText('afterbegin', `${currency(getTotal() + 10)}`)
  })

  $countProducts?.forEach(($el) => {
    $el?.insertAdjacentText('afterbegin', `${getCountProducts()}`)
  })
  const getProvinces = (ubigeo: keyof typeof provinces) => {
    return provinces[ubigeo]
  }

  const getDistricts = (ubigeo: keyof typeof districts) => {
    return districts[ubigeo]
  }

  $regions?.addEventListener('change', (e) => {
    if ($provinces) {
      $provinces.innerHTML = ''
    }
    getProvinces(
      (e?.target as HTMLSelectElement).value as keyof typeof provinces
    ).forEach((province) => {
      $provinces?.insertAdjacentHTML(
        'afterbegin',
        `<option value=${province.id_ubigeo}>${province.nombre_ubigeo}</option>`
      )
    })
  })
  $provinces?.addEventListener('change', (e) => {
    if ($districts) {
      $districts.innerHTML = ''
    }
    getDistricts(
      (e?.target as HTMLSelectElement).value as keyof typeof districts
    ).forEach((district) => {
      $districts?.insertAdjacentHTML(
        'afterbegin',
        `<option value=${district.id_ubigeo}>${district.nombre_ubigeo}</option>`
      )
    })
  })
  const settings = {
    title: 'DeCajon Store',
    currency: 'PEN', // Este parámetro es requerido para realizar pagos yape
    amount: (getTotal() + 10) * 100, // Este parámetro es requerido para realizar pagos yape(80.00)
    //  order: 'ord_live_d1P0Tu1n7Od4nZdp', // Este parámetro es requerido para realizar pagos con pagoEfectivo, billeteras y Cuotéalo
    // xculqirsaid: 'Inserta aquí el id de tu llave pública RSA',
    rsapublickey: 'pk_test_001032e48811feb5',
  }
  const client = { email: 'leo-nik@hotmail.com' }
  const paymentMethods = {
    // las opciones se ordenan según se configuren
    tarjeta: true,
    yape: true,
    // billetera: true,
    // bancaMovil: true,
    // agente: true,
    // cuotealo: true,
  }

  const options = {
    lang: 'auto',
    installments: true, // Habilitar o deshabilitar el campo de cuotas
    modal: true,
    // container: "#culqi-container", // Opcional - Div donde quieres cargar el checkout
    paymentMethods: paymentMethods,
    paymentMethodsSort: Object.keys(paymentMethods), // las opciones se ordenan según se configuren en paymentMethods
  }
  const config = {
    settings,
    client,
    options,
  }
  const publicKey = 'pk_test_001032e48811feb5'
  const Culqi = new (window as any).CulqiCheckout(publicKey, config)
  const handleCulqiAction = () => {
    if (Culqi.token) {
      const token = Culqi.token.id
      Culqi.close()
      console.log('Se ha creado un Token: ', token)
      //En esta linea de codigo debemos enviar el "Culqi.token.id"
      //hacia tu servidor con Ajax
    } else if (Culqi.order) {
      // ¡Objeto Order creado exitosamente!
      Culqi.close()
      const order = Culqi.order
      console.log('Se ha creado el objeto Order: ', order)
    } else {
      // Mostramos JSON de objeto error en consola
      console.log('Error : ', Culqi.error)
    }
  }

  Culqi.culqi = handleCulqiAction
  $buttonCheckout?.addEventListener('click', () => {
    Culqi.open()
  })
</script>
